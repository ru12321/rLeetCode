    class Solution {
            private static final List<Character> LEFT_CHAR =  new ArrayList<>(Arrays.asList('(', '[', '{'));
    private static final List<Character> RIGHT_CHAR =  new ArrayList<>(Arrays.asList(')', ']', '}'));
        public boolean isValid(String s) {
            LinkedList<Character> stack = new LinkedList<>();
            for (int i = 0; i < s.length(); i++) {
                if(LEFT_CHAR.contains(s.charAt(i))){
                    stack.push(s.charAt(i));
                }else if(RIGHT_CHAR.contains(s.charAt(i))){
                    if(stack.isEmpty()){
                        return false;
                    }
                    if (!match(stack.pop(), s.charAt(i))){
                        return false;
                    }
                }
            }
            return stack.isEmpty();
        }


        private boolean match(Character left, Character cur){
            switch (left){
                case '(': return cur == ')';
                case '[': return cur == ']';
                case '{': return cur == '}';
                default: return false;
            }
        }
    }
//runtime:2 ms
//memory:40.7 MB
